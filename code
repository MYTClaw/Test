import gi
gi.require_version('Gst', '1.0')
from gi.repository import Gst, GLib

def pad_added_handler(src, new_pad, depay):
    caps = new_pad.get_current_caps()
    if caps:
        s = caps.get_structure(0)
        if s and s.get_name() == 'application/x-rtp':
            sink_pad = depay.get_static_pad('sink')
            if sink_pad and not sink_pad.is_linked():
                new_pad.link(sink_pad)

def bus_call(bus, message, loop):
    t = message.type
    if t == Gst.MessageType.EOS:
        loop.quit()
    elif t == Gst.MessageType.ERROR:
        err, debug = message.parse_error()
        print(f"Error: {err}, {debug}")
        loop.quit()
    return True

def main():
    # EDIT THESE TWO LINES
    rtsp_uri = "rtsp://user:pass@host:port/stream"
    cfg_path = "/opt/nvidia/deepstream/deepstream-7.1/samples/configs/config_infer_primary_trafficcamnet.txt"

    Gst.init(None)
    pipeline = Gst.Pipeline.new("rtsp-ds-pipeline")

    source = Gst.ElementFactory.make("rtspsrc", "src")
    source.set_property("location", rtsp_uri)

    depay   = Gst.ElementFactory.make("rtph264depay", "depay")
    parse   = Gst.ElementFactory.make("h264parse", "parse")
    decoder = Gst.ElementFactory.make("nvv4l2decoder", "decoder")

    streammux = Gst.ElementFactory.make("nvstreammux", "mux")
    streammux.set_property("batch-size", 1)
    streammux.set_property("live-source", 1)

    pgie = Gst.ElementFactory.make("nvinfer", "pgie")
    pgie.set_property("config-file-path", cfg_path)

    nvvidconv = Gst.ElementFactory.make("nvvideoconvert", "conv")
    nvosd     = Gst.ElementFactory.make("nvdsosd", "osd")

    sink = Gst.ElementFactory.make("fakesink", "sink")
    sink.set_property("sync", False)

    for e in [source, depay, parse, decoder, streammux, pgie, nvvidconv, nvosd, sink]:
        if not e:
            print("Failed to create an element"); return

    pipeline.add(source); pipeline.add(depay); pipeline.add(parse); pipeline.add(decoder)
    pipeline.add(streammux); pipeline.add(pgie); pipeline.add(nvvidconv); pipeline.add(nvosd); pipeline.add(sink)

    if not depay.link(parse): print("link depay->parse failed"); return
    if not parse.link(decoder): print("link parse->decoder failed"); return

    dec_src = decoder.get_static_pad("src")
    mux_sink = streammux.get_request_pad("sink_0")
    if not dec_src or not mux_sink or dec_src.link(mux_sink) != Gst.PadLinkReturn.OK:
        print("link decoder->mux sink_0 failed"); return

    if not streammux.link(pgie): print("link mux->pgie failed"); return
    if not pgie.link(nvvidconv): print("link pgie->conv failed"); return
    if not nvvidconv.link(nvosd): print("link conv->osd failed"); return
    if not nvosd.link(sink): print("link osd->sink failed"); return

    source.connect("pad-added", pad_added_handler, depay)

    loop = GLib.MainLoop()
    bus = pipeline.get_bus(); bus.add_signal_watch()
    bus.connect("message", bus_call, loop)

    print("Starting pipeline")
    pipeline.set_state(Gst.State.PLAYING)
    try:
        loop.run()
    except KeyboardInterrupt:
        pass
    pipeline.set_state(Gst.State.NULL)

if __name__ == "__main__":
    main()
