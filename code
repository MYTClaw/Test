import gi
gi.require_version('Gst', '1.0')
from gi.repository import Gst, GLib

def src_pad_added(src, new_pad, muxer):
    sink_pad = muxer.get_request_pad("sink_0")
    if not sink_pad:
        print("Failed to request nvstreammux sink_0 pad"); return
    if not sink_pad.is_linked():
        ret = new_pad.link(sink_pad)
        if ret != Gst.PadLinkReturn.OK:
            print(f"Failed to link srcbin->mux: {ret}")

def bus_call(bus, message, loop):
    t = message.type
    if t == Gst.MessageType.EOS:
        print("End-of-stream"); loop.quit()
    elif t == Gst.MessageType.ERROR:
        err, debug = message.parse_error()
        print(f"Error: {err}, {debug}"); loop.quit()
    return True

def main():
    rtsp_uri = "rtsp://user:pass@HOST:PORT/PATH"   # EDIT
    cfg_path = "/home/ubuntu/people-detection/config_infer_primary_trafficcamnet.txt"  # EDIT

    Gst.init(None)
    pipeline = Gst.Pipeline.new("rtsp-ds-pipeline")

    srcbin = Gst.ElementFactory.make("nvurisrcbin", "srcbin")
    srcbin.set_property("uri", rtsp_uri)
    srcbin.set_property("select-rtp-protocol", 4)       # rtp-tcp
    srcbin.set_property("latency", 300)                 # 200â€“500 typical
    srcbin.set_property("rtsp-reconnect-interval", 10)  # seconds
    srcbin.set_property("rtsp-reconnect-attempts", -1)  # infinite
    srcbin.set_property("drop-on-latency", True)
    srcbin.set_property("num-extra-surfaces", 8)        # more decode buffers

    streammux = Gst.ElementFactory.make("nvstreammux", "mux")
    streammux.set_property("batch-size", 1)
    streammux.set_property("live-source", 1)
    streammux.set_property("width", 1280)
    streammux.set_property("height", 720)

    pgie = Gst.ElementFactory.make("nvinfer", "pgie")
    pgie.set_property("config-file-path", cfg_path)

    nvvidconv = Gst.ElementFactory.make("nvvideoconvert", "conv")
    nvosd     = Gst.ElementFactory.make("nvdsosd", "osd")
    sink      = Gst.ElementFactory.make("fakesink", "sink")
    sink.set_property("sync", False)

    for e in [srcbin, streammux, pgie, nvvidconv, nvosd, sink]:
        if not e:
            print("Failed to create an element"); return

    pipeline.add(srcbin); pipeline.add(streammux); pipeline.add(pgie)
    pipeline.add(nvvidconv); pipeline.add(nvosd); pipeline.add(sink)

    srcbin.connect("pad-added", src_pad_added, streammux)
    if not streammux.link(pgie): print("link mux->pgie failed"); return
    if not pgie.link(nvvidconv): print("link pgie->conv failed"); return
    if not nvvidconv.link(nvosd): print("link conv->osd failed"); return
    if not nvosd.link(sink): print("link osd->sink failed"); return

    loop = GLib.MainLoop()
    bus = pipeline.get_bus(); bus.add_signal_watch()
    bus.connect("message", bus_call, loop)

    print("Starting pipeline")
    pipeline.set_state(Gst.State.PLAYING)
    try: loop.run()
    except KeyboardInterrupt: pass
    pipeline.set_state(Gst.State.NULL)

if __name__ == "__main__":
    main()
