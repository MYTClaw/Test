import gi
gi.require_version('Gst', '1.0')
from gi.repository import Gst, GLib
import sys

def pad_added_handler(src, new_pad, depay):
    caps = new_pad.get_current_caps()
    if caps:
        structure = caps.get_structure(0)
        if structure.get_name() == 'application/x-rtp':
            sink_pad = depay.get_static_pad('sink')
            if not sink_pad.is_linked():
                new_pad.link(sink_pad)

def bus_call(bus, message, loop):
    t = message.type
    if t == Gst.MessageType.EOS:
        print("End-of-stream")
        loop.quit()
    elif t == Gst.MessageType.ERROR:
        err, debug = message.parse_error()
        print(f"Error: {err}, {debug}")
        loop.quit()
    return True

def main():
    if len(sys.argv) != 4:
        print("Usage: python3 script.py <rtsp_uri> <engine_path> <labels_path>")
        sys.exit(1)

    rtsp_uri = sys.argv[1]
    engine_path = sys.argv[2]
    labels_path = sys.argv[3]

    Gst.init(None)

    pipeline = Gst.Pipeline()
    if not pipeline:
        print("Unable to create Pipeline")
        return

    # Source elements
    source = Gst.ElementFactory.make("rtspsrc", "rtsp-source")
    source.set_property("location", rtsp_uri)

    depay = Gst.ElementFactory.make("rtph264depay", "rtp-depay")
    parse = Gst.ElementFactory.make("h264parse", "h264-parse")
    decoder = Gst.ElementFactory.make("nvv4l2decoder", "nv-decoder")

    # DeepStream elements
    mux = Gst.ElementFactory.make("nvstreammux", "Stream-muxer")
    mux.set_property("width", 960)  # Match model input width
    mux.set_property("height", 544)  # Match model input height
    mux.set_property("batch-size", 1)
    mux.set_property("batched-push-timeout", 4000000)
    mux.set_property("live-source", True)

    pgie = Gst.ElementFactory.make("nvinfer", "primary-inference")
    pgie.set_property("config-file-path", None)  # Using direct properties
    pgie.set_property("model-engine-file", engine_path)
    pgie.set_property("labelfile-path", labels_path)
    pgie.set_property("gpu-id", 0)
    pgie.set_property("net-scale-factor", 0.00392156862745098)  # 1/255.0
    pgie.set_property("model-color-format", 0)  # RGB
    pgie.set_property("on-board", False)
    pgie.set_property("batch-size", 1)
    pgie.set_property("network-mode", 2)  # FP16
    pgie.set_property("network-type", 0)  # Primary detector
    pgie.set_property("num-detected-classes", 4)  # Car, Person, Bicycle, Sign
    pgie.set_property("interval", 0)  # Infer on every frame
    pgie.set_property("gie-unique-id", 1)
    pgie.set_property("process-mode", 1)  # Primary
    pgie.set_property("input-dims", "3;960;544;0")  # CHW format
    pgie.set_property("output-blob-names", "output_bbox/BiasAdd;output_cov/Sigmoid")
    pgie.set_property("maintain-aspect-ratio", 1)
    pgie.set_property("parse-bbox-func-name", "NMS_5")  # For DetectNet_v2

    sink = Gst.ElementFactory.make("fakesink", "fake-sink")
    sink.set_property("sync", False)

    if not all([source, depay, parse, decoder, mux, pgie, sink]):
        print("Not all elements could be created.")
        return

    pipeline.add(source)
    pipeline.add(depay)
    pipeline.add(parse)
    pipeline.add(decoder)
    pipeline.add(mux)
    pipeline.add(pgie)
    pipeline.add(sink)

    # Static links
    depay.link(parse)
    parse.link(decoder)

    # Dynamic link for source pads
    source.connect("pad-added", pad_added_handler, depay)

    # Link decoder to mux pad 0
    decoder_src_pad = decoder.get_static_pad("src")
    mux_sink_pad = mux.get_request_pad("sink_0")
    if not decoder_src_pad.link(mux_sink_pad):
        print("Unable to link decoder to mux")
        return

    # Link mux to pgie to sink
    mux.link(pgie)
    pgie.link(sink)

    loop = GLib.MainLoop()
    bus = pipeline.get_bus()
    bus.add_signal_watch()
    bus.connect("message", bus_call, loop)

    print("Starting pipeline with TrafficCamNet detection")
    pipeline.set_state(Gst.State.PLAYING)

    try:
        loop.run()
    except:
        pass

    pipeline.set_state(Gst.State.NULL)

if __name__ == '__main__':
    main()
